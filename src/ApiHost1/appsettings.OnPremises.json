{
  "Logging": {
    "ApplicationInsights": {
      "LogLevel": {
        "Default": "Information",
        "Microsoft": "Error"
      }
    }
  },
  "ApplicationInsights": {
    "ConnectionString": ""
  },
  "ApplicationServices": {
    "Persistence": {
      "AzureStorageAccount": {
        "AccountName": "",
        "AccountKey": "",
        "ManagedIdentityClientId": ""
      },
      "AzureServiceBus": {
        "ConnectionString": "",
        "NamespaceName": "",
        "ManagedIdentityClientId": ""
      },
      "SqlServer": {
        "DbServerName": "(local)",
        "DbCredentials": "",
        "DbName": "SaaStack",
        "ManagedIdentityClientId": ""
      }
    },
    "MicrosoftIdentity": {
      "BaseUrl": "https://localhost:5656/microsoftidentity",
      "ClientId": "",
      "ClientSecret": "",
      "RedirectUri": "https://localhost:5001/sso/microsoft"
    }
  },
  "RabbitMQ": {
    "ConnectionString": "amqp://guest:guest@localhost:5672/",
    "RequestedHeartbeat": 60,
    "AutomaticRecoveryEnabled": true,
    "NetworkRecoveryInterval": "00:00:10",
    "DefaultPrefetchCount": 10,
    "ConnectionName": "WorkerHostRelayService", // Nombre más descriptivo
    "MaxDeliveryCountBeforeFailure": 5,     // Usado por el Listener para el circuit breaker
    "CircuitBreakDurationMinutes": 2,       // Usado por el Listener

    "RetryPolicies": {
      "DefaultWorkQueuePolicy": {
        "RetryExchangeName": "work.retry.exchange", // Exchange dedicado para reintentos de colas de trabajo
        "RetryExchangeType": "direct",
        "Attempts": [
          { "DelaySeconds": 5, "RoutingKeySuffix": "retry.5s" },
          { "DelaySeconds": 30, "RoutingKeySuffix": "retry.30s" },
          { "DelaySeconds": 300, "RoutingKeySuffix": "retry.5m" }
        ],
        "FinalDlqSuffix": "dlq", // ej. {queueName}.dlq
        "FinalDlxExchangeSuffix": "dlx", // ej. {queueName}.dlx
        "FinalDlxExchangeType": "fanout"
      },
      "DomainEventsPolicy": { // Política específica para eventos de dominio
        "RetryExchangeName": "domain_events.retry.exchange",
        "RetryExchangeType": "direct",
        "Attempts": [
          { "DelaySeconds": 10, "RoutingKeySuffix": "retry.10s" },
          { "DelaySeconds": 60, "RoutingKeySuffix": "retry.60s" },
          { "DelaySeconds": 600, "RoutingKeySuffix": "retry.10m" }
        ],
        "FinalDlqSuffix": "dlq",
        "FinalDlxExchangeSuffix": "dlx",
        "FinalDlxExchangeType": "fanout"
      }
    },

    "Queues": {
      // Colas directas (de tu imagen)
      "Audits": "audits",
      "Emails": "emails",
      "Usages": "usages",
      "Provisioning": "provisioning", // Asumiendo que también tienes esta

      // Colas para suscripciones de eventos de dominio (basado en imagen)
      "DomainEvents_ApiHost1_EndUsers_Queue": "domain_events_apihost1_endusers_sub",
      "DomainEvents_ApiHost1_Organizations_Queue": "domain_events_apihost1_organizations_sub",
      "DomainEvents_ApiHost1_Subscriptions_Queue": "domain_events_apihost1_subscriptions_sub",
      "DomainEvents_ApiHost1_UserProfiles_Queue": "domain_events_apihost1_userprofiles_sub"
    },

    "Exchanges": {
      "DomainEventsTopic": { // Nombre lógico para la config
        "Name": "domain_events", // Nombre real del exchange, como en tu imagen
        "Type": "topic",
        "Durable": true,
        "AutoDelete": false, // Generalmente los exchanges de topic no son auto-delete
        "Arguments": {}
      }
      // Los exchanges de reintento se pueden declarar por convención en TopologyManager
      // o definirlos aquí si son compartidos y nombres fijos.
    },

    "Bindings": { // Para las colas de suscripción al topic exchange
      "DomainEvents_ApiHost1_EndUsers": { // Clave lógica
        "QueueConfigKey": "Queues:DomainEvents_ApiHost1_EndUsers_Queue", // Referencia a la clave de la cola
        "ExchangeConfigKey": "Exchanges:DomainEventsTopic", // Referencia a la clave del exchange
        "RoutingKey": "ApiHost1-EndUsers", // Routing key para el binding (como en tu imagen .json)
        "SubscriptionName": "ApiHost1-EndUsers" // Para el worker
      },
      "DomainEvents_ApiHost1_Organizations": {
        "QueueConfigKey": "Queues:DomainEvents_ApiHost1_Organizations_Queue",
        "ExchangeConfigKey": "Exchanges:DomainEventsTopic",
        "RoutingKey": "ApiHost1-Organizations",
        "SubscriptionName": "ApiHost1-Organizations"
      },
      "DomainEvents_ApiHost1_Subscriptions": {
        "QueueConfigKey": "Queues:DomainEvents_ApiHost1_Subscriptions_Queue",
        "ExchangeConfigKey": "Exchanges:DomainEventsTopic",
        "RoutingKey": "ApiHost1-Subscriptions",
        "SubscriptionName": "ApiHost1-Subscriptions"
      },
      "DomainEvents_ApiHost1_UserProfiles": {
        "QueueConfigKey": "Queues:DomainEvents_ApiHost1_UserProfiles_Queue",
        "ExchangeConfigKey": "Exchanges:DomainEventsTopic",
        "RoutingKey": "ApiHost1-UserProfiles",
        "SubscriptionName": "ApiHost1-UserProfiles"
      }
    }
  },
  "Platform": { // Sección leída por tu IConfigurationSettings.Platform
    "Setting1": "Value1"
    // Aquí también podrían ir las configuraciones de ApiEndpoints si tu IHostSettings/IConfigurationSettings lo estructura así
    // en lugar de la sección "Hosts". Dado tu código de AspNetDynamicConfigurationSettings,
    // PlatformSettings usa la IConfiguration raíz, así que las claves deben ser accesibles desde ahí.
    // La sección "Hosts" es más explícita para URLs/secretos de API.
  },
  "Deploy": {
    "Notes": "Lists the required configuration keys that must be overwritten (by the GitHub configuration action) when we deploy this host",
    "Instructions": "Whenever you add new settings to the top part of this file, consider adding them to the list below if you need them overwritten for deployment",
    "Required": [
      {
        "Keys": [
          "ApplicationInsights:ConnectionString",
          "ApplicationServices:Persistence:AzureStorageAccount:AccountName",
          "ApplicationServices:Persistence:AzureStorageAccount:AccountKey",
          "ApplicationServices:Persistence:AzureServiceBus:ConnectionString",
          "ApplicationServices:Persistence:SqlServer:DbServerName",
          "ApplicationServices:Persistence:SqlServer:DbCredentials",
          "ApplicationServices:Persistence:SqlServer:DbName"
        ]
      },
      {
        "Description": "Settings for specific optional technology adapters",
        "Instructions": "If you configure any of these technology adapters to be the default at runtime, via dependency injection, then move those Keys to the previous section",
        "Disabled": true,
        "Keys": [
          "ApplicationServices:MicrosoftIdentity:BaseUrl",
          "ApplicationServices:MicrosoftIdentity:ClientId",
          "ApplicationServices:MicrosoftIdentity:ClientSecret",
          "ApplicationServices:MicrosoftIdentity:RedirectUri"
        ]
      }
    ]
  }
}
